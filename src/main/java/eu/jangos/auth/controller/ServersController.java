package eu.jangos.auth.controller;

import eu.jangos.auth.dto.ServersDTO;
import eu.jangos.auth.exception.DatabaseIntegrityException;
import eu.jangos.auth.exception.EntityExistsException;
import eu.jangos.auth.exception.InvalidArgumentException;
import eu.jangos.auth.model.Servers;
import java.util.List;
import javax.ejb.Stateless;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 *
 * @author Warkdev
 */
@Stateless
public class ServersController {

    private static final Logger logger = LoggerFactory.getLogger(ServersController.class);

    @PersistenceContext(name = "AuthPU")
    private EntityManager em;        
    
    /**
     * Get the server associated to the given id.
     * @param id The id of the server to look for.
     * @return The server corresponding to the given ID.
     * @throws DatabaseIntegrityException if no server with the given ID is found.
     */
    public Servers get(int id) throws DatabaseIntegrityException
    {
        Servers server = null;
        
        try{
            server = (Servers) this.em.createNamedQuery("Servers.findById").setParameter("id", id).getSingleResult();
        } catch (NoResultException nre) {
            throw new DatabaseIntegrityException("No server found with the id "+id);
        }
        
        return server;
    }
    
    /**
     * Get the server associated to the name given in parameter.
     * @param name The name of the server to be found.
     * @return The server corresponding to the given name.
     * @throws DatabaseIntegrityException If no servers with the given name is found.
     * @throws InvalidArgumentException If the supplied name is null or empty.
     */
    public Servers get(String name) throws DatabaseIntegrityException, InvalidArgumentException
    {
        if(name == null || name.isEmpty())
        {
            throw new InvalidArgumentException("The name parameter is null or empty", "");
        }
        
        Servers server = null;
        
        try{
            server = (Servers) this.em.createNamedQuery("Servers.findByName").setParameter("name", name).getSingleResult();
        } catch (NoResultException nre) {
            throw new DatabaseIntegrityException("No server found with the name "+name);
        }
        
        return server;
    }
    
    /**
     * This method returns the servers matching to the token generated by the KeyApiAuthenticatingFilter.
     * @param name The name of the server.
     * @param key The key of the server.
     * @return The server object found or null otherwise.
     * @throws InvalidArgumentException If the name or the key is invalid.
     * @throws DatabaseIntegrityException If there is no record matching the token.
     */
    public Servers getByToken(String name, String key) throws InvalidArgumentException, DatabaseIntegrityException
    {
        if(name == null || name.isEmpty())
        {
            throw new InvalidArgumentException("The name parameter is null or empty", "");
        }
        
        if(key == null || key.isEmpty())
        {
            throw new InvalidArgumentException("The key parameter is null or empty", "");
        }
        
        Servers server = null;
        
        try{
            server = (Servers) this.em.createNamedQuery("Servers.findByToken")
                    .setParameter("name", name)
                    .setParameter("key", key)
                    .getSingleResult();
        } catch (NoResultException nre) {
            throw new DatabaseIntegrityException("No server found with the name "+name+" and the key "+key);
        }
        
        return server;
    }
    
    /**
     * Get all the servers available in the database.
     * @return All the servers available in the database.     
     */
    public List<Servers> getAll()
    {
        List<Servers> listServers = this.em.createNamedQuery("Servers.findAll").getResultList();
        
        return listServers;
    }
    
    /**
     * Create a new server in the database.
     * @param serverDTO The server to be inserted.
     * @return The created server.
     * @throws InvalidArgumentException If there was an error during the input validation.
     * @throws EntityExistsException If the server already exist.
     */
    public Servers create(ServersDTO serverDTO) throws InvalidArgumentException, EntityExistsException
    {
        if(serverDTO == null)
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role DTO is null");
        }
        
        if(serverDTO.getName() == null || serverDTO.getName().isEmpty())
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role name is empty");
        }
        
        if(serverDTO.getKey()== null || serverDTO.getKey().isEmpty())
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role description is empty");
        }
        
        Servers server = new Servers();
        
        try{
            get(serverDTO.getName());
            throw new EntityExistsException("The server already exist");
        } catch (DatabaseIntegrityException die) {
            
        }
        
        server.setName(serverDTO.getName());
        server.setKey(serverDTO.getKey());        
        server.setRevoked(serverDTO.isRevoked());
        
        this.em.persist(server);
        return server;
    }
    
    /**
     * Delete the server corresponding to the given ID.
     * @param id The ID of the server to be deleted.
     * @throws DatabaseIntegrityException If the ID does not match to any server.
     */
    public void delete(int id) throws DatabaseIntegrityException
    {
        Servers server = get(id);
        
        this.em.remove(server);
    }
    
    /**
     * Update a server in the database.
     * @param serverDTO The server to be updated.
     * @return The updated server.
     * @throws InvalidArgumentException If there was an error during the input validation.
     * @throws DatabaseIntegrityException If the server to update is not found in the database.
     */
    public Servers update(ServersDTO serverDTO) throws InvalidArgumentException, DatabaseIntegrityException
    {
         if(serverDTO == null)
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role DTO is null");
        }
        
        if(serverDTO.getName() == null || serverDTO.getName().isEmpty())
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role name is empty");
        }
        
        if(serverDTO.getKey()== null || serverDTO.getKey().isEmpty())
        {
            throw new InvalidArgumentException("The data provided are uncomplete", "The provided role description is empty");
        }
        
        Servers server = new Servers();        
        
        server.setId(serverDTO.getId());
        server.setName(serverDTO.getName());
        server.setKey(serverDTO.getKey());        
        server.setRevoked(serverDTO.isRevoked());
        
        this.em.merge(server);
        return server;
    }
}
